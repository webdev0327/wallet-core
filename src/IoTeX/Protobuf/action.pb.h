// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: action.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_action_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_action_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_action_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_action_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_action_2eproto;
namespace iotextypes {
class Action;
class ActionDefaultTypeInternal;
extern ActionDefaultTypeInternal _Action_default_instance_;
class ActionCore;
class ActionCoreDefaultTypeInternal;
extern ActionCoreDefaultTypeInternal _ActionCore_default_instance_;
class Execution;
class ExecutionDefaultTypeInternal;
extern ExecutionDefaultTypeInternal _Execution_default_instance_;
class Transfer;
class TransferDefaultTypeInternal;
extern TransferDefaultTypeInternal _Transfer_default_instance_;
}  // namespace iotextypes
PROTOBUF_NAMESPACE_OPEN
template<> ::iotextypes::Action* Arena::CreateMaybeMessage<::iotextypes::Action>(Arena*);
template<> ::iotextypes::ActionCore* Arena::CreateMaybeMessage<::iotextypes::ActionCore>(Arena*);
template<> ::iotextypes::Execution* Arena::CreateMaybeMessage<::iotextypes::Execution>(Arena*);
template<> ::iotextypes::Transfer* Arena::CreateMaybeMessage<::iotextypes::Transfer>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace iotextypes {

// ===================================================================

class Transfer :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:iotextypes.Transfer) */ {
 public:
  Transfer();
  virtual ~Transfer();

  Transfer(const Transfer& from);
  Transfer(Transfer&& from) noexcept
    : Transfer() {
    *this = ::std::move(from);
  }

  inline Transfer& operator=(const Transfer& from) {
    CopyFrom(from);
    return *this;
  }
  inline Transfer& operator=(Transfer&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Transfer& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Transfer* internal_default_instance() {
    return reinterpret_cast<const Transfer*>(
               &_Transfer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Transfer& a, Transfer& b) {
    a.Swap(&b);
  }
  inline void Swap(Transfer* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Transfer* New() const final {
    return CreateMaybeMessage<Transfer>(nullptr);
  }

  Transfer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Transfer>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Transfer& from);
  void MergeFrom(const Transfer& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Transfer* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "iotextypes.Transfer";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_action_2eproto);
    return ::descriptor_table_action_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAmountFieldNumber = 1,
    kRecipientFieldNumber = 2,
    kPayloadFieldNumber = 3,
  };
  // string amount = 1;
  void clear_amount();
  const std::string& amount() const;
  void set_amount(const std::string& value);
  void set_amount(std::string&& value);
  void set_amount(const char* value);
  void set_amount(const char* value, size_t size);
  std::string* mutable_amount();
  std::string* release_amount();
  void set_allocated_amount(std::string* amount);

  // string recipient = 2;
  void clear_recipient();
  const std::string& recipient() const;
  void set_recipient(const std::string& value);
  void set_recipient(std::string&& value);
  void set_recipient(const char* value);
  void set_recipient(const char* value, size_t size);
  std::string* mutable_recipient();
  std::string* release_recipient();
  void set_allocated_recipient(std::string* recipient);

  // bytes payload = 3;
  void clear_payload();
  const std::string& payload() const;
  void set_payload(const std::string& value);
  void set_payload(std::string&& value);
  void set_payload(const char* value);
  void set_payload(const void* value, size_t size);
  std::string* mutable_payload();
  std::string* release_payload();
  void set_allocated_payload(std::string* payload);

  // @@protoc_insertion_point(class_scope:iotextypes.Transfer)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr amount_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr recipient_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr payload_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_action_2eproto;
};
// -------------------------------------------------------------------

class Execution :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:iotextypes.Execution) */ {
 public:
  Execution();
  virtual ~Execution();

  Execution(const Execution& from);
  Execution(Execution&& from) noexcept
    : Execution() {
    *this = ::std::move(from);
  }

  inline Execution& operator=(const Execution& from) {
    CopyFrom(from);
    return *this;
  }
  inline Execution& operator=(Execution&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Execution& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Execution* internal_default_instance() {
    return reinterpret_cast<const Execution*>(
               &_Execution_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Execution& a, Execution& b) {
    a.Swap(&b);
  }
  inline void Swap(Execution* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Execution* New() const final {
    return CreateMaybeMessage<Execution>(nullptr);
  }

  Execution* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Execution>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Execution& from);
  void MergeFrom(const Execution& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Execution* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "iotextypes.Execution";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_action_2eproto);
    return ::descriptor_table_action_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAmountFieldNumber = 1,
    kContractFieldNumber = 2,
    kDataFieldNumber = 3,
  };
  // string amount = 1;
  void clear_amount();
  const std::string& amount() const;
  void set_amount(const std::string& value);
  void set_amount(std::string&& value);
  void set_amount(const char* value);
  void set_amount(const char* value, size_t size);
  std::string* mutable_amount();
  std::string* release_amount();
  void set_allocated_amount(std::string* amount);

  // string contract = 2;
  void clear_contract();
  const std::string& contract() const;
  void set_contract(const std::string& value);
  void set_contract(std::string&& value);
  void set_contract(const char* value);
  void set_contract(const char* value, size_t size);
  std::string* mutable_contract();
  std::string* release_contract();
  void set_allocated_contract(std::string* contract);

  // bytes data = 3;
  void clear_data();
  const std::string& data() const;
  void set_data(const std::string& value);
  void set_data(std::string&& value);
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  std::string* mutable_data();
  std::string* release_data();
  void set_allocated_data(std::string* data);

  // @@protoc_insertion_point(class_scope:iotextypes.Execution)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr amount_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr contract_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_action_2eproto;
};
// -------------------------------------------------------------------

class ActionCore :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:iotextypes.ActionCore) */ {
 public:
  ActionCore();
  virtual ~ActionCore();

  ActionCore(const ActionCore& from);
  ActionCore(ActionCore&& from) noexcept
    : ActionCore() {
    *this = ::std::move(from);
  }

  inline ActionCore& operator=(const ActionCore& from) {
    CopyFrom(from);
    return *this;
  }
  inline ActionCore& operator=(ActionCore&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ActionCore& default_instance();

  enum ActionCase {
    kTransfer = 10,
    kExecution = 12,
    ACTION_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ActionCore* internal_default_instance() {
    return reinterpret_cast<const ActionCore*>(
               &_ActionCore_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ActionCore& a, ActionCore& b) {
    a.Swap(&b);
  }
  inline void Swap(ActionCore* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ActionCore* New() const final {
    return CreateMaybeMessage<ActionCore>(nullptr);
  }

  ActionCore* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ActionCore>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ActionCore& from);
  void MergeFrom(const ActionCore& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ActionCore* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "iotextypes.ActionCore";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_action_2eproto);
    return ::descriptor_table_action_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGasPriceFieldNumber = 4,
    kNonceFieldNumber = 2,
    kGasLimitFieldNumber = 3,
    kVersionFieldNumber = 1,
    kTransferFieldNumber = 10,
    kExecutionFieldNumber = 12,
  };
  // string gasPrice = 4;
  void clear_gasprice();
  const std::string& gasprice() const;
  void set_gasprice(const std::string& value);
  void set_gasprice(std::string&& value);
  void set_gasprice(const char* value);
  void set_gasprice(const char* value, size_t size);
  std::string* mutable_gasprice();
  std::string* release_gasprice();
  void set_allocated_gasprice(std::string* gasprice);

  // uint64 nonce = 2;
  void clear_nonce();
  ::PROTOBUF_NAMESPACE_ID::uint64 nonce() const;
  void set_nonce(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // uint64 gasLimit = 3;
  void clear_gaslimit();
  ::PROTOBUF_NAMESPACE_ID::uint64 gaslimit() const;
  void set_gaslimit(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // uint32 version = 1;
  void clear_version();
  ::PROTOBUF_NAMESPACE_ID::uint32 version() const;
  void set_version(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // .iotextypes.Transfer transfer = 10;
  bool has_transfer() const;
  void clear_transfer();
  const ::iotextypes::Transfer& transfer() const;
  ::iotextypes::Transfer* release_transfer();
  ::iotextypes::Transfer* mutable_transfer();
  void set_allocated_transfer(::iotextypes::Transfer* transfer);

  // .iotextypes.Execution execution = 12;
  bool has_execution() const;
  void clear_execution();
  const ::iotextypes::Execution& execution() const;
  ::iotextypes::Execution* release_execution();
  ::iotextypes::Execution* mutable_execution();
  void set_allocated_execution(::iotextypes::Execution* execution);

  void clear_action();
  ActionCase action_case() const;
  // @@protoc_insertion_point(class_scope:iotextypes.ActionCore)
 private:
  class _Internal;
  void set_has_transfer();
  void set_has_execution();

  inline bool has_action() const;
  inline void clear_has_action();

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr gasprice_;
  ::PROTOBUF_NAMESPACE_ID::uint64 nonce_;
  ::PROTOBUF_NAMESPACE_ID::uint64 gaslimit_;
  ::PROTOBUF_NAMESPACE_ID::uint32 version_;
  union ActionUnion {
    ActionUnion() {}
    ::iotextypes::Transfer* transfer_;
    ::iotextypes::Execution* execution_;
  } action_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_action_2eproto;
};
// -------------------------------------------------------------------

class Action :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:iotextypes.Action) */ {
 public:
  Action();
  virtual ~Action();

  Action(const Action& from);
  Action(Action&& from) noexcept
    : Action() {
    *this = ::std::move(from);
  }

  inline Action& operator=(const Action& from) {
    CopyFrom(from);
    return *this;
  }
  inline Action& operator=(Action&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Action& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Action* internal_default_instance() {
    return reinterpret_cast<const Action*>(
               &_Action_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Action& a, Action& b) {
    a.Swap(&b);
  }
  inline void Swap(Action* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Action* New() const final {
    return CreateMaybeMessage<Action>(nullptr);
  }

  Action* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Action>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Action& from);
  void MergeFrom(const Action& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Action* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "iotextypes.Action";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_action_2eproto);
    return ::descriptor_table_action_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSenderPubKeyFieldNumber = 2,
    kSignatureFieldNumber = 3,
    kCoreFieldNumber = 1,
  };
  // bytes senderPubKey = 2;
  void clear_senderpubkey();
  const std::string& senderpubkey() const;
  void set_senderpubkey(const std::string& value);
  void set_senderpubkey(std::string&& value);
  void set_senderpubkey(const char* value);
  void set_senderpubkey(const void* value, size_t size);
  std::string* mutable_senderpubkey();
  std::string* release_senderpubkey();
  void set_allocated_senderpubkey(std::string* senderpubkey);

  // bytes signature = 3;
  void clear_signature();
  const std::string& signature() const;
  void set_signature(const std::string& value);
  void set_signature(std::string&& value);
  void set_signature(const char* value);
  void set_signature(const void* value, size_t size);
  std::string* mutable_signature();
  std::string* release_signature();
  void set_allocated_signature(std::string* signature);

  // .iotextypes.ActionCore core = 1;
  bool has_core() const;
  void clear_core();
  const ::iotextypes::ActionCore& core() const;
  ::iotextypes::ActionCore* release_core();
  ::iotextypes::ActionCore* mutable_core();
  void set_allocated_core(::iotextypes::ActionCore* core);

  // @@protoc_insertion_point(class_scope:iotextypes.Action)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr senderpubkey_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr signature_;
  ::iotextypes::ActionCore* core_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_action_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Transfer

// string amount = 1;
inline void Transfer::clear_amount() {
  amount_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Transfer::amount() const {
  // @@protoc_insertion_point(field_get:iotextypes.Transfer.amount)
  return amount_.GetNoArena();
}
inline void Transfer::set_amount(const std::string& value) {
  
  amount_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:iotextypes.Transfer.amount)
}
inline void Transfer::set_amount(std::string&& value) {
  
  amount_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:iotextypes.Transfer.amount)
}
inline void Transfer::set_amount(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  amount_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:iotextypes.Transfer.amount)
}
inline void Transfer::set_amount(const char* value, size_t size) {
  
  amount_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:iotextypes.Transfer.amount)
}
inline std::string* Transfer::mutable_amount() {
  
  // @@protoc_insertion_point(field_mutable:iotextypes.Transfer.amount)
  return amount_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Transfer::release_amount() {
  // @@protoc_insertion_point(field_release:iotextypes.Transfer.amount)
  
  return amount_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Transfer::set_allocated_amount(std::string* amount) {
  if (amount != nullptr) {
    
  } else {
    
  }
  amount_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), amount);
  // @@protoc_insertion_point(field_set_allocated:iotextypes.Transfer.amount)
}

// string recipient = 2;
inline void Transfer::clear_recipient() {
  recipient_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Transfer::recipient() const {
  // @@protoc_insertion_point(field_get:iotextypes.Transfer.recipient)
  return recipient_.GetNoArena();
}
inline void Transfer::set_recipient(const std::string& value) {
  
  recipient_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:iotextypes.Transfer.recipient)
}
inline void Transfer::set_recipient(std::string&& value) {
  
  recipient_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:iotextypes.Transfer.recipient)
}
inline void Transfer::set_recipient(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  recipient_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:iotextypes.Transfer.recipient)
}
inline void Transfer::set_recipient(const char* value, size_t size) {
  
  recipient_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:iotextypes.Transfer.recipient)
}
inline std::string* Transfer::mutable_recipient() {
  
  // @@protoc_insertion_point(field_mutable:iotextypes.Transfer.recipient)
  return recipient_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Transfer::release_recipient() {
  // @@protoc_insertion_point(field_release:iotextypes.Transfer.recipient)
  
  return recipient_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Transfer::set_allocated_recipient(std::string* recipient) {
  if (recipient != nullptr) {
    
  } else {
    
  }
  recipient_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), recipient);
  // @@protoc_insertion_point(field_set_allocated:iotextypes.Transfer.recipient)
}

// bytes payload = 3;
inline void Transfer::clear_payload() {
  payload_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Transfer::payload() const {
  // @@protoc_insertion_point(field_get:iotextypes.Transfer.payload)
  return payload_.GetNoArena();
}
inline void Transfer::set_payload(const std::string& value) {
  
  payload_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:iotextypes.Transfer.payload)
}
inline void Transfer::set_payload(std::string&& value) {
  
  payload_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:iotextypes.Transfer.payload)
}
inline void Transfer::set_payload(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  payload_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:iotextypes.Transfer.payload)
}
inline void Transfer::set_payload(const void* value, size_t size) {
  
  payload_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:iotextypes.Transfer.payload)
}
inline std::string* Transfer::mutable_payload() {
  
  // @@protoc_insertion_point(field_mutable:iotextypes.Transfer.payload)
  return payload_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Transfer::release_payload() {
  // @@protoc_insertion_point(field_release:iotextypes.Transfer.payload)
  
  return payload_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Transfer::set_allocated_payload(std::string* payload) {
  if (payload != nullptr) {
    
  } else {
    
  }
  payload_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), payload);
  // @@protoc_insertion_point(field_set_allocated:iotextypes.Transfer.payload)
}

// -------------------------------------------------------------------

// Execution

// string amount = 1;
inline void Execution::clear_amount() {
  amount_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Execution::amount() const {
  // @@protoc_insertion_point(field_get:iotextypes.Execution.amount)
  return amount_.GetNoArena();
}
inline void Execution::set_amount(const std::string& value) {
  
  amount_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:iotextypes.Execution.amount)
}
inline void Execution::set_amount(std::string&& value) {
  
  amount_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:iotextypes.Execution.amount)
}
inline void Execution::set_amount(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  amount_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:iotextypes.Execution.amount)
}
inline void Execution::set_amount(const char* value, size_t size) {
  
  amount_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:iotextypes.Execution.amount)
}
inline std::string* Execution::mutable_amount() {
  
  // @@protoc_insertion_point(field_mutable:iotextypes.Execution.amount)
  return amount_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Execution::release_amount() {
  // @@protoc_insertion_point(field_release:iotextypes.Execution.amount)
  
  return amount_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Execution::set_allocated_amount(std::string* amount) {
  if (amount != nullptr) {
    
  } else {
    
  }
  amount_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), amount);
  // @@protoc_insertion_point(field_set_allocated:iotextypes.Execution.amount)
}

// string contract = 2;
inline void Execution::clear_contract() {
  contract_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Execution::contract() const {
  // @@protoc_insertion_point(field_get:iotextypes.Execution.contract)
  return contract_.GetNoArena();
}
inline void Execution::set_contract(const std::string& value) {
  
  contract_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:iotextypes.Execution.contract)
}
inline void Execution::set_contract(std::string&& value) {
  
  contract_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:iotextypes.Execution.contract)
}
inline void Execution::set_contract(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  contract_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:iotextypes.Execution.contract)
}
inline void Execution::set_contract(const char* value, size_t size) {
  
  contract_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:iotextypes.Execution.contract)
}
inline std::string* Execution::mutable_contract() {
  
  // @@protoc_insertion_point(field_mutable:iotextypes.Execution.contract)
  return contract_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Execution::release_contract() {
  // @@protoc_insertion_point(field_release:iotextypes.Execution.contract)
  
  return contract_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Execution::set_allocated_contract(std::string* contract) {
  if (contract != nullptr) {
    
  } else {
    
  }
  contract_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), contract);
  // @@protoc_insertion_point(field_set_allocated:iotextypes.Execution.contract)
}

// bytes data = 3;
inline void Execution::clear_data() {
  data_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Execution::data() const {
  // @@protoc_insertion_point(field_get:iotextypes.Execution.data)
  return data_.GetNoArena();
}
inline void Execution::set_data(const std::string& value) {
  
  data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:iotextypes.Execution.data)
}
inline void Execution::set_data(std::string&& value) {
  
  data_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:iotextypes.Execution.data)
}
inline void Execution::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:iotextypes.Execution.data)
}
inline void Execution::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:iotextypes.Execution.data)
}
inline std::string* Execution::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:iotextypes.Execution.data)
  return data_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Execution::release_data() {
  // @@protoc_insertion_point(field_release:iotextypes.Execution.data)
  
  return data_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Execution::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:iotextypes.Execution.data)
}

// -------------------------------------------------------------------

// ActionCore

// uint32 version = 1;
inline void ActionCore::clear_version() {
  version_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ActionCore::version() const {
  // @@protoc_insertion_point(field_get:iotextypes.ActionCore.version)
  return version_;
}
inline void ActionCore::set_version(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  version_ = value;
  // @@protoc_insertion_point(field_set:iotextypes.ActionCore.version)
}

// uint64 nonce = 2;
inline void ActionCore::clear_nonce() {
  nonce_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ActionCore::nonce() const {
  // @@protoc_insertion_point(field_get:iotextypes.ActionCore.nonce)
  return nonce_;
}
inline void ActionCore::set_nonce(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  nonce_ = value;
  // @@protoc_insertion_point(field_set:iotextypes.ActionCore.nonce)
}

// uint64 gasLimit = 3;
inline void ActionCore::clear_gaslimit() {
  gaslimit_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ActionCore::gaslimit() const {
  // @@protoc_insertion_point(field_get:iotextypes.ActionCore.gasLimit)
  return gaslimit_;
}
inline void ActionCore::set_gaslimit(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  gaslimit_ = value;
  // @@protoc_insertion_point(field_set:iotextypes.ActionCore.gasLimit)
}

// string gasPrice = 4;
inline void ActionCore::clear_gasprice() {
  gasprice_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ActionCore::gasprice() const {
  // @@protoc_insertion_point(field_get:iotextypes.ActionCore.gasPrice)
  return gasprice_.GetNoArena();
}
inline void ActionCore::set_gasprice(const std::string& value) {
  
  gasprice_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:iotextypes.ActionCore.gasPrice)
}
inline void ActionCore::set_gasprice(std::string&& value) {
  
  gasprice_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:iotextypes.ActionCore.gasPrice)
}
inline void ActionCore::set_gasprice(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  gasprice_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:iotextypes.ActionCore.gasPrice)
}
inline void ActionCore::set_gasprice(const char* value, size_t size) {
  
  gasprice_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:iotextypes.ActionCore.gasPrice)
}
inline std::string* ActionCore::mutable_gasprice() {
  
  // @@protoc_insertion_point(field_mutable:iotextypes.ActionCore.gasPrice)
  return gasprice_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ActionCore::release_gasprice() {
  // @@protoc_insertion_point(field_release:iotextypes.ActionCore.gasPrice)
  
  return gasprice_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ActionCore::set_allocated_gasprice(std::string* gasprice) {
  if (gasprice != nullptr) {
    
  } else {
    
  }
  gasprice_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), gasprice);
  // @@protoc_insertion_point(field_set_allocated:iotextypes.ActionCore.gasPrice)
}

// .iotextypes.Transfer transfer = 10;
inline bool ActionCore::has_transfer() const {
  return action_case() == kTransfer;
}
inline void ActionCore::set_has_transfer() {
  _oneof_case_[0] = kTransfer;
}
inline void ActionCore::clear_transfer() {
  if (has_transfer()) {
    delete action_.transfer_;
    clear_has_action();
  }
}
inline ::iotextypes::Transfer* ActionCore::release_transfer() {
  // @@protoc_insertion_point(field_release:iotextypes.ActionCore.transfer)
  if (has_transfer()) {
    clear_has_action();
      ::iotextypes::Transfer* temp = action_.transfer_;
    action_.transfer_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::iotextypes::Transfer& ActionCore::transfer() const {
  // @@protoc_insertion_point(field_get:iotextypes.ActionCore.transfer)
  return has_transfer()
      ? *action_.transfer_
      : *reinterpret_cast< ::iotextypes::Transfer*>(&::iotextypes::_Transfer_default_instance_);
}
inline ::iotextypes::Transfer* ActionCore::mutable_transfer() {
  if (!has_transfer()) {
    clear_action();
    set_has_transfer();
    action_.transfer_ = CreateMaybeMessage< ::iotextypes::Transfer >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:iotextypes.ActionCore.transfer)
  return action_.transfer_;
}

// .iotextypes.Execution execution = 12;
inline bool ActionCore::has_execution() const {
  return action_case() == kExecution;
}
inline void ActionCore::set_has_execution() {
  _oneof_case_[0] = kExecution;
}
inline void ActionCore::clear_execution() {
  if (has_execution()) {
    delete action_.execution_;
    clear_has_action();
  }
}
inline ::iotextypes::Execution* ActionCore::release_execution() {
  // @@protoc_insertion_point(field_release:iotextypes.ActionCore.execution)
  if (has_execution()) {
    clear_has_action();
      ::iotextypes::Execution* temp = action_.execution_;
    action_.execution_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::iotextypes::Execution& ActionCore::execution() const {
  // @@protoc_insertion_point(field_get:iotextypes.ActionCore.execution)
  return has_execution()
      ? *action_.execution_
      : *reinterpret_cast< ::iotextypes::Execution*>(&::iotextypes::_Execution_default_instance_);
}
inline ::iotextypes::Execution* ActionCore::mutable_execution() {
  if (!has_execution()) {
    clear_action();
    set_has_execution();
    action_.execution_ = CreateMaybeMessage< ::iotextypes::Execution >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:iotextypes.ActionCore.execution)
  return action_.execution_;
}

inline bool ActionCore::has_action() const {
  return action_case() != ACTION_NOT_SET;
}
inline void ActionCore::clear_has_action() {
  _oneof_case_[0] = ACTION_NOT_SET;
}
inline ActionCore::ActionCase ActionCore::action_case() const {
  return ActionCore::ActionCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// Action

// .iotextypes.ActionCore core = 1;
inline bool Action::has_core() const {
  return this != internal_default_instance() && core_ != nullptr;
}
inline void Action::clear_core() {
  if (GetArenaNoVirtual() == nullptr && core_ != nullptr) {
    delete core_;
  }
  core_ = nullptr;
}
inline const ::iotextypes::ActionCore& Action::core() const {
  const ::iotextypes::ActionCore* p = core_;
  // @@protoc_insertion_point(field_get:iotextypes.Action.core)
  return p != nullptr ? *p : *reinterpret_cast<const ::iotextypes::ActionCore*>(
      &::iotextypes::_ActionCore_default_instance_);
}
inline ::iotextypes::ActionCore* Action::release_core() {
  // @@protoc_insertion_point(field_release:iotextypes.Action.core)
  
  ::iotextypes::ActionCore* temp = core_;
  core_ = nullptr;
  return temp;
}
inline ::iotextypes::ActionCore* Action::mutable_core() {
  
  if (core_ == nullptr) {
    auto* p = CreateMaybeMessage<::iotextypes::ActionCore>(GetArenaNoVirtual());
    core_ = p;
  }
  // @@protoc_insertion_point(field_mutable:iotextypes.Action.core)
  return core_;
}
inline void Action::set_allocated_core(::iotextypes::ActionCore* core) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete core_;
  }
  if (core) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      core = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, core, submessage_arena);
    }
    
  } else {
    
  }
  core_ = core;
  // @@protoc_insertion_point(field_set_allocated:iotextypes.Action.core)
}

// bytes senderPubKey = 2;
inline void Action::clear_senderpubkey() {
  senderpubkey_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Action::senderpubkey() const {
  // @@protoc_insertion_point(field_get:iotextypes.Action.senderPubKey)
  return senderpubkey_.GetNoArena();
}
inline void Action::set_senderpubkey(const std::string& value) {
  
  senderpubkey_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:iotextypes.Action.senderPubKey)
}
inline void Action::set_senderpubkey(std::string&& value) {
  
  senderpubkey_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:iotextypes.Action.senderPubKey)
}
inline void Action::set_senderpubkey(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  senderpubkey_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:iotextypes.Action.senderPubKey)
}
inline void Action::set_senderpubkey(const void* value, size_t size) {
  
  senderpubkey_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:iotextypes.Action.senderPubKey)
}
inline std::string* Action::mutable_senderpubkey() {
  
  // @@protoc_insertion_point(field_mutable:iotextypes.Action.senderPubKey)
  return senderpubkey_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Action::release_senderpubkey() {
  // @@protoc_insertion_point(field_release:iotextypes.Action.senderPubKey)
  
  return senderpubkey_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Action::set_allocated_senderpubkey(std::string* senderpubkey) {
  if (senderpubkey != nullptr) {
    
  } else {
    
  }
  senderpubkey_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), senderpubkey);
  // @@protoc_insertion_point(field_set_allocated:iotextypes.Action.senderPubKey)
}

// bytes signature = 3;
inline void Action::clear_signature() {
  signature_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Action::signature() const {
  // @@protoc_insertion_point(field_get:iotextypes.Action.signature)
  return signature_.GetNoArena();
}
inline void Action::set_signature(const std::string& value) {
  
  signature_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:iotextypes.Action.signature)
}
inline void Action::set_signature(std::string&& value) {
  
  signature_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:iotextypes.Action.signature)
}
inline void Action::set_signature(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  signature_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:iotextypes.Action.signature)
}
inline void Action::set_signature(const void* value, size_t size) {
  
  signature_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:iotextypes.Action.signature)
}
inline std::string* Action::mutable_signature() {
  
  // @@protoc_insertion_point(field_mutable:iotextypes.Action.signature)
  return signature_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Action::release_signature() {
  // @@protoc_insertion_point(field_release:iotextypes.Action.signature)
  
  return signature_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Action::set_allocated_signature(std::string* signature) {
  if (signature != nullptr) {
    
  } else {
    
  }
  signature_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), signature);
  // @@protoc_insertion_point(field_set_allocated:iotextypes.Action.signature)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace iotextypes

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_action_2eproto
